#!/bin/bash

###############################################################################
# tasknote - associate note file with individual tasks in taskwarrior
#
# Copyright 2011, Alan Bowen, bowen@tcnj.edu.
# All rights reserved.
#
# based on taskopen - file based notes with taskwarrior
#
# Copyright 2010, Johannes Schlatow.
# All rights reserved.
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the
#
#     Free Software Foundation, Inc.,
#     51 Franklin Street, Fifth Floor,
#     Boston, MA
#     02110-1301
#     USA
#
###############################################################################

# Updated 2012, Michael Bobroski <bobroski@gmail.com>
#   - Updated to work with Taskwarrior 2.0
#   - View Note Feature
# - Allow relative path for FOLDER

# Updated Apr 2015 by Alexander Czar - https://github.com/AlexCzar
#   - Upgraded backticks use to more safe and modern $() construct
#   - EDITOR, VIEWER, notes directory (FOLDER) and note file extension (EXT)
#     are now configurable via environment variables:
#       * TASKNOTE_EDITOR: default - 'vim'
#       * TASKNOTE_VIEWER: default - 'cat'
#       * TASKNOTE_FOLDER: default - '~/.task/notes', changed from Dropbox as per
#         [3rd party app Guidelines](http://taskwarrior.org/docs/3rd-party.html)
#       * TASKNOTE_FILE_EXT: default - '.txt'
#   - Added option to delete notes via 'tasknote ## d' where ## is the task number
#   - Spaces or other 'special' characters can now be used in the name of notes directory.
#   - Other minor updates and tweaks.

# Message that gets annotated to the task to indicate that notes exist
NOTEMSG="See Notes File"
SELECT_WRONG_OPTION_MESSAGE="Please type the option number not name."

EDITOR=${TASKNOTE_EDITOR:-vim}
VIEWER=${TASKNOTE_VIEWER:-cat}
EXT=${TASKNOTE_FILE_EXT:-txt}
TASKBIN=task
# FOLDER to store notes in.
# If you sync tasks, FOLDER should be a location that syncs and is available to
# other computers, i.e. ~/dropbox/tasknotes
# by default, store them in the task data location feel free to change it
TASK_FOLDER="$( task _show | grep data\.location | cut -d '=' -f2 )"
FOLDER=${TASKNOTE_FOLDER:-$TASK_FOLDER/notes}
# substitude ~ if data.location use it
FOLDER="${FOLDER/#~/$HOME}"

# Check for existence of $FOLDER
if [ ! -d "$FOLDER" ]; then
  echo -e "Notes folder '$FOLDER' does not exist. \nDo you want to create it?"
  select yn in "Yes" "No"; do
    case $yn in
      Yes ) echo "Creating '$FOLDER'."
          mkdir -p "$FOLDER"
          break;;
      No ) echo "Did NOT create $FOLDER. Exiting."
          exit 1;;
      * ) echo "$SELECT_WRONG_OPTION_MESSAGE";;
    esac
  done
fi

# Display usage if task number not supplied on cli
if [ $# -lt 1 -o $# -gt 2 ]; then
  echo "Usage:"
  echo "  New/Edit note: $0 <id>"
  echo "  View note:     $0 <id> [v]iew"
  echo "  Delete note:   $0 <id> [d]elete"
  exit 1
fi

# Find UUID from given task
uuid=$($TASKBIN $1 uuids)
description=`$TASKBIN _get $1.description`:

# Build full path & file name to store notes in
FOLDER=`echo "$FOLDER" | sed "s|^~|$HOME|"`
[ "${FOLDER: -1}" != "/" ] && FOLDER=$FOLDER/ # ensure FOLDER ends with a slash
file="$FOLDER$uuid.$EXT"

# Determine if notes file already exists
fileexists=0
if [ -f "$file" ]; then
  fileexists=1
fi

# Display/remove note if requested and exit
if [ $# -gt 1 ]; then
  if [ $fileexists = 1 ]; then
    action=$2
    case $action in
      v|view)
        $SHELL -c "$VIEWER \"$file\""
        ;;
      d|delete)
        $SHELL -c "rm \"$file\""
        $SHELL -c "$TASKBIN $1 denotate \"[tasknote]\""
        ;;
    esac
  else
    echo "File not found"
  fi
  exit 1
else
  # Use first line of file to add the task description
  if [ $fileexists = 1 ]; then
    # Update if description has changed
    firstline=$(head -1 $file)
    if [ $firstline != $description ]; then
      $SHELL -c "sed -i '' '1s/^.*$/$description/' $file"
    fi
  else
    $SHELL -c "echo -e '$description' > $file"
    # Add an underline using = below the description
    dashes=${#description}
    $SHELL -c "printf '=%.0s' {1..$dashes} >> $file"
  fi
fi

# Create/edit $file with editor
$SHELL -c "$EDITOR '$file'"

# Create a note message representing the first line of
# the edited note file.
# if [ -s "$file" ]; then
#   NOTEMSG="[tasknote] $(head -1 "$file" | sed -e "s,','\"'\"',g")"
#   # remove any previous annotation - we want only a single
#   # tasknote annotation. Detection works through the
#   # [note] annotation prefix
#   $SHELL -c "$TASKBIN $* denotate \"[tasknote]\""
#   $SHELL -c "$TASKBIN $* annotate '$NOTEMSG'"
# else
#   [ -f "$file" ] && $SHELL -c "rm '$file'"
# fi

# Instead create one single note when the file is created
# When the file is deleted delete the annotation
# The annotation shoudl be "[tasknote] <path_to_file>"
# Also add a tag +notes (check if it doesn't exist already to avoid duplicates)

exit 0
