[user]
  email = bertocq@gmail.com
  name = Bertocq
[color]
  ui = true
[color "branch"]
  current = red
  local = green
  remote = white
[color "diff"]
  old = red strike
[core]
  attributesfile = ~/.gitattributes
  autocrlf = input
  compression = -1
  editor = subl -w -n
  excludesfile = ~/.gitignore_global
  whitespace = trailing-space,space-before-tab
  ignorecase = false
[alias]
  aliases=!git config -l | grep '^alias' | cut -c 7- | sort

  # Status
  st = status -s
  gsp = "!git status --porcelain | cut -c4-" # List all changed files without status symbols

  # Log
  gl = log --graph --pretty=format:'%C(yellow)%h%C(reset) -%C(auto)%d %s %C(green)(%cr) %C(bold blue)<%an>'
  up = "!git gl origin/\"$(git current-branch)\"..HEAD" # Unpushed commits on current branch
  glf = log --all --source -- # List all commits that changed a file

  # Pull
  fu = fetch upstream
  p = pull --rebase

  # Adding
  ga = add
  gaa = add .
  gai = add -i

  # Staging
  s = stash --include-untracked
  sa = stash apply
  sc = "!git s && git sd" # Destroy files in working dir & staging area
  sd = stash drop
  spu = stash push # Use like git spu /path/to/files
  sp = stash pop
  ss = show stash

  # Branches
  current-branch = "!git symbolic-ref --short HEAD"
  ba = branch -a
  bd = branch -D
  bdr = "!sh -c 'git push origin :refs/heads/$1 && git branch -D $1' -" # Delete local & remote branch
  bs = branch -vv
  bsr = !git reflog show --pretty=format:'%gs ~ %gd' --date=relative | grep 'checkout:' | grep -oE '[^ ]+ ~ .*' | awk -F~ '!seen[$1]++' | head -n 10 | awk -F' ~ HEAD@{' '{printf(\"  \\033[33m%s: \\033[37m %s\\033[0m\\n\", substr($2, 1, length($2)-1), $1)}' # Most recently-used branches

  clearb = "!git branch --merged | grep -v "(^*|master|stable)" | xargs git branch -d"
  co = checkout
  cob = checkout -b
  br = "!sh -c 'git checkout --track origin/$1' -" # Gets a branch from remote
  getmaster = git branch --track master origin/master # Grab master again after messing up
  mab = "!git pull && git checkout $1 && git pull && git merge @{-1} --no-edit && git push && git checkout @{-1}"
  ms = "!git checkout stable && git pull && git checkout @{-1} && git merge origin/stable"
  pb = "!sh -c 'git push --set-upstream origin $1' -"
  pu = ![[ $(git config "branch.$(git current-branch).merge") = '' ]] && git push -u origin $(git current-branch) || git push
  rpo = remote update --prune # Removes merged branches from all remotes

  # Commits
  ca = commit --amend
  can = commit --amend --no-edit
  cae = commit --allow-empty
  cne = commit --no-edit
  cp = cherry-pick
  cpa = cherry-pick --abort
  cpc = cherry-pick --continue
  csha = !git rev-parse HEAD | pbcopy # copy sha of last commit

  # Diff
  gd = "!git diff --color | diff-so-fancy" # Changes in working directory files
  gdf = "!sh -c \" git diff --color $1 | diff-so-fancy\" -" # Changes in working dir for a file (name as arg)
  gf = whatchanged -p # Git history for a file (name as arg)
  gds = "!git diff --staged --color | diff-so-fancy" # Changes in staging area files
  gdsf = "!sh -c \" git diff --staged --color $1 | diff-so-fancy\" -" # Changes in staging area for a file (name as arg)
  gdmaster = diff --name-only --diff-filter=d master..HEAD # Files changed between current branch and master, excluding deleted
  gdstable = diff --name-only --diff-filter=d stable..HEAD # Files changed between current branch and master, excluding deleted

  # Submodules
  sub = pull --recurse-submodules
  sup = !git submodule update && git submodule foreach git checkout master && git submodule foreach git pull origin master

  # Reverting
  reset = reset HEAD^ --mixed
  revert = reset HEAD~
  ucm = reset --soft HEAD^
  undo = reset --soft HEAD~1 # Undo last commit (affects HEAD only)
  unstage = reset HEAD --

  # Rebasing
  ra = rebase --abort
  rc = rebase --continue
  ri = rebase -i
  rbm = "!git rebase -i `git merge-base master HEAD`" # Interactive rebase of all branch commits that aren't in master
  rbs = "!git rebase -i `git merge-base stable HEAD`" # Interactive rebase of all branch commits that aren't in stable

  # Github
  PR = "!hub pull-request --push --edit -F ~/.github_template.md --browse"
  PRR = "!hub pull-request --push --edit -F ~/.github_template.md -l 'Ready for Review' --browse"

  # Ctags
  ctags = !.git/hooks/ctags

[diff]
  colorMoved = plain # Display moved lines of code with different color
  compactionHeuristic = true # Turn on experimental heuristic to make the diff easier to read
  mnemonicprefix = true
  renames = copies
  noprefix = true # Removes `a/` and `b/` from filepaths when displaying a diff
[diff-so-fancy]
  changeHunkIndicators = true
  markEmptyLines = true
  stripLeadingSymbols = true
  useUnicodeRuler = true
[push]
  default = tracking
[pull]
  rebase = true
[commit]
  template = ~/.gitmessage
  verbose = true
[filter "lfs"]
  clean = git-lfs clean -- %f
  required = true
  smudge = git-lfs smudge -- %f
[credential]
  helper = osxkeychain
[github]
  user = bertocq
[fetch]
  prune = true
[branch]
  autosetupmerge = true
  autosetuprebase = always
[merge]
  stat = true
[rerere]
  enabled = true
[status]
  # In `git status`, show all files underneath a new directory when the
  # directory is untracked. Or, in other words, don't show untracked directories
  # as a single line.
  showUntrackedFiles = all
[merge "railsschema"]
  name = newer Rails schema version
  driver = "ruby -e '\n\
          system %(git), %(merge-file), %(--marker-size=%L), %(%A), %(%O), %(%B)\n\
          b = File.read(%(%A))\n\
          b.sub!(/^<+ .*\\nActiveRecord::Schema\\.define.:version => (\\d+). do\\n=+\\nActiveRecord::Schema\\.define.:version => (\\d+). do\\n>+ .*/) do\n\
            %(ActiveRecord::Schema.define(:version => #{[$1, $2].max}) do)\n\
          end\n\
          File.open(%(%A), %(w)) {|f| f.write(b)}\n\
          exit 1 if b.include?(%(<)*%L)'"
[diff "rspec"]
  xfuncname = "^[ \t]*((RSpec|describe|context|it|before|after|around|feature|scenario)[ \t].*)$"
[init]
  templatedir = ~/.git_template
[rebase]
  autosquash = true
  autostash = true # Automatically stash before rebasing, to rebase with changes in the repo.
