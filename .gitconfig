[user]
  name = Bertocq
  email = bertocq@gmail.com
[color]
  ui = true
[color "branch"]
  current = red
  local = green
  remote = white
[color "diff"]
  old = red strike
[core]
  excludesfile = ~/.gitignore_global
  attributesfile = ~/.gitattributes
  autocrlf = input
  editor = subl -w -n
  whitespace = trailing-space,space-before-tab
  compression = -1
[alias]
  aliases=!git config -l | grep '^alias' | cut -c 7- | sort

  # Status
  st = status -s
  lg = log --graph --pretty=format:'%C(yellow)%h%C(reset) -%C(auto)%d %s %C(green)(%cr) %C(bold blue)<%an>'

  # Pull
  p = pull --rebase

  # Staging
  s = stash
  ss = show stash
  su = stash --include-untracked
  sa = stash apply
  sd = stash drop
  sp = stash pop
  sc = "!git stash && git stash drop"

  # Branches
  ba = branch -a
  bs = branch -vv
  bd = branch -D
  co = checkout
  cob = checkout -b
  db = "!sh -c 'git push origin :refs/heads/$1 && git branch -D $1' -"
  pb = "!sh -c 'git push --set-upstream origin $1' -"
  pu = ![[ $(git config "branch.$(git symbolic-ref --short HEAD).merge") = '' ]] && git push -u origin $(git symbolic-ref --short HEAD) || git push
  clearb = "! git branch --merged | xargs git branch -d"
  rpo = remote prune origin
  mr = "!git checkout master && git pull && git checkout @{-1} && git rebase origin/master"
  mab = "!git pull && git checkout $1 && git pull && git merge @{-1} --no-edit && git push && git checkout @{-1}"

  # Commits
  ci = commit
  cp = cherry-pick
  cm = commit -m
  ca = commit --amend
  can = commit --amend --no-edit
  cn = commit --no-edit
  ucm = reset --soft HEAD^
  it = !git init && git commit -m “root” --allow-empty
  csha = !git rev-parse HEAD | pbcopy # copy sha of last commit

  # Diff
  gd = "! git diff --color | diff-so-fancy"
  gdf = "!sh -c \" git diff --color $1 | diff-so-fancy\" -"
  gds = "! git diff --staged --color | diff-so-fancy"
  gdsf = "!sh -c \" git diff --staged --color $1 | diff-so-fancy\" -"

  # Rubocop
  ru = "! git status --porcelain | cut -c4- | grep -E 'rb|rake|Gemfile|ru' | xargs rubocop -a"
  rubo = "! git status --porcelain | cut -c4- | grep -E 'rb|rake|Gemfile|ru' | xargs rubocop"
  rup = "!sh -c \"git diff --name-only HEAD..$1 | grep -E 'rb|rake|Gemfile|ru' | xargs rubocop -a\" -"
  rubop = "!sh -c \"git diff --name-only HEAD..$1 | grep -E 'rb|rake|Gemfile|ru' | xargs rubocop \" -"

  # Submodules
  sub = pull --recurse-submodules
  sup = !git submodule update && git submodule foreach git checkout master && git submodule foreach git pull origin master

  # Reverting
  revert = reset HEAD~
  reset = reset HEAD^ --mixed
  undo = reset --soft HEAD~1 # Undo last commit (affects HEAD only)
  unstage = reset HEAD --

  # Rebasing
  ri = rebase -i
  rc = rebase --continue

  # Github
  PR = "!hub pull-request --push --edit -F ~/.github_template.md --browse"
  PRR = "!hub pull-request --push --edit -F ~/.github_template.md -l 'Ready for Review' --browse"

  # Ctags
  ctags = !.git/hooks/ctags

[diff]
  # Turn on an experimental heuristic that should make the diff easier to read
  compactionHeuristic = true
  renames = copies
  mnemonicprefix = true
[diff-so-fancy]
  markEmptyLines = true
  changeHunkIndicators = true
  stripLeadingSymbols = true
  useUnicodeRuler = true
[push]
  default = tracking
[pull]
  rebase = true
[commit]
  template = ~/.gitmessage
  verbose = true
[filter "lfs"]
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  required = true
[credential]
  helper = osxkeychain
[github]
  user = bertocq
[fetch]
  prune = true
[branch]
  autosetuprebase = always
  autosetupmerge = true
[merge]
  stat = true
[rerere]
  enabled = true
[merge "bundlelock"]
  name = bundle lock
  driver = bundle lock
[merge "railsschema"]
  name = newer Rails schema version
  driver = "ruby -e '\n\
          system %(git), %(merge-file), %(--marker-size=%L), %(%A), %(%O), %(%B)\n\
          b = File.read(%(%A))\n\
          b.sub!(/^<+ .*\\nActiveRecord::Schema\\.define.:version => (\\d+). do\\n=+\\nActiveRecord::Schema\\.define.:version => (\\d+). do\\n>+ .*/) do\n\
            %(ActiveRecord::Schema.define(:version => #{[$1, $2].max}) do)\n\
          end\n\
          File.open(%(%A), %(w)) {|f| f.write(b)}\n\
          exit 1 if b.include?(%(<)*%L)'"
[init]
  templatedir = ~/.git_template
