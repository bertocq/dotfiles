[user]
  email = bertocq@gmail.com
  name = Bertocq
[color]
  ui = true
[color "branch"]
  current = red
  local = green
  remote = white
[color "diff"]
  old = red strike
[core]
  attributesfile = ~/.gitattributes
  autocrlf = input
  compression = -1
  editor = subl -w -n
  excludesfile = ~/.gitignore_global
  whitespace = trailing-space,space-before-tab
[alias]
  aliases=!git config -l | grep '^alias' | cut -c 7- | sort

  # Status
  lg = log --graph --pretty=format:'%C(yellow)%h%C(reset) -%C(auto)%d %s %C(green)(%cr) %C(bold blue)<%an>'
  st = status -s

  # Pull
  fu = fetch upstream
  p = pull --rebase

  # Staging
  s = stash
  sa = stash apply
  sc = "!git stash && git stash drop" # Just destroy everything in working directory & staging area
  sd = stash drop
  sp = stash pop
  ss = show stash
  su = stash --include-untracked

  # Branches
  ba = branch -a
  bd = branch -D
  bs = branch -vv
  clearb = "! git branch --merged | xargs git branch -d"
  co = checkout
  cob = checkout -b
  db = "!sh -c 'git push origin :refs/heads/$1 && git branch -D $1' -" # Delete remote branch
  getmaster = git branch --track master origin/master # Grab master again after messing up
  mab = "!git pull && git checkout $1 && git pull && git merge @{-1} --no-edit && git push && git checkout @{-1}"
  mr = "!git checkout master && git pull && git checkout @{-1} && git rebase origin/master"
  pb = "!sh -c 'git push --set-upstream origin $1' -"
  pu = ![[ $(git config "branch.$(git symbolic-ref --short HEAD).merge") = '' ]] && git push -u origin $(git symbolic-ref --short HEAD) || git push
  rpo = remote prune origin

  # Commits
  ca = commit --amend
  cae = commit --allow-empty
  can = commit --amend --no-edit
  ci = commit
  cm = commit -m
  cn = commit --no-edit
  cp = cherry-pick
  cpa = cherry-pick --abort
  cpc = cherry-pick --continue
  csha = !git rev-parse HEAD | pbcopy # copy sha of last commit
  it = !git init && git commit -m “root” --allow-empty
  ucm = reset --soft HEAD^

  # Diff
  ## Changes in working directory
  gd = "! git diff --color | diff-so-fancy"
  ## Changes in working directory for a particular file passed as argument
  gdf = "!sh -c \" git diff --color $1 | diff-so-fancy\" -"
  ## Changes in staging area
  gds = "! git diff --staged --color | diff-so-fancy"
  ## Changes in staging area for a particular file passed as argument
  gdsf = "!sh -c \" git diff --staged --color $1 | diff-so-fancy\" -"

  # Rubocop
  ## Rubocop autocorrect on files in working directory & staging area
  ru = "! git status --porcelain | cut -c4- | grep -E 'rb|rake|Gemfile|ru' | xargs rubocop -a"
  ## Rubocop autocorrect on files in diff between current branch and the one passed as argument
  rud = "!sh -c \"git diff --name-only HEAD..$1 | grep -E 'rb|rake|Gemfile|ru' | xargs rubocop -a\" -"

  # Submodules
  sub = pull --recurse-submodules
  sup = !git submodule update && git submodule foreach git checkout master && git submodule foreach git pull origin master

  # Reverting
  reset = reset HEAD^ --mixed
  revert = reset HEAD~
  undo = reset --soft HEAD~1 # Undo last commit (affects HEAD only)
  unstage = reset HEAD --

  # Rebasing
  ra = rebase --abort
  rc = rebase --continue
  ri = rebase -i

  # Github
  PR = "!hub pull-request --push --edit -F ~/.github_template.md --browse"
  PRR = "!hub pull-request --push --edit -F ~/.github_template.md -l 'Ready for Review' --browse"

  # Ctags
  ctags = !.git/hooks/ctags

[diff]
  colorMoved = plain # Display moved lines of code with different color
  compactionHeuristic = true # Turn on experimental heuristic to make the diff easier to read
  mnemonicprefix = true
  renames = copies
[diff-so-fancy]
  changeHunkIndicators = true
  markEmptyLines = true
  stripLeadingSymbols = true
  useUnicodeRuler = true
[push]
  default = tracking
[pull]
  rebase = true
[commit]
  template = ~/.gitmessage
  verbose = true
[filter "lfs"]
  clean = git-lfs clean -- %f
  required = true
  smudge = git-lfs smudge -- %f
[credential]
  helper = osxkeychain
[github]
  user = bertocq
[fetch]
  prune = true
[branch]
  autosetupmerge = true
  autosetuprebase = always
[merge]
  stat = true
[rerere]
  enabled = true
[status]
  # In `git status`, show all files underneath a new directory when the
  # directory is untracked. Or, in other words, don't show untracked directories
  # as a single line.
  showUntrackedFiles = all
[merge "bundlelock"]
  name = bundle lock
  driver = bundle lock
[merge "railsschema"]
  name = newer Rails schema version
  driver = "ruby -e '\n\
          system %(git), %(merge-file), %(--marker-size=%L), %(%A), %(%O), %(%B)\n\
          b = File.read(%(%A))\n\
          b.sub!(/^<+ .*\\nActiveRecord::Schema\\.define.:version => (\\d+). do\\n=+\\nActiveRecord::Schema\\.define.:version => (\\d+). do\\n>+ .*/) do\n\
            %(ActiveRecord::Schema.define(:version => #{[$1, $2].max}) do)\n\
          end\n\
          File.open(%(%A), %(w)) {|f| f.write(b)}\n\
          exit 1 if b.include?(%(<)*%L)'"
[init]
  templatedir = ~/.git_template
[rebase]
  autosquash = true
  autostash = true # Automatically stash before rebasing, to rebase with changes in the repo.
